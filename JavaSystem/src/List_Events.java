import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

import javax.swing.JOptionPane;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JButton;
import javax.swing.ImageIcon;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JList;

import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.ActionEvent;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/*package javaapplication1;*/

/**
 * @author user
 */
public class List_Events extends javax.swing.JFrame
{

   /**
    * Creates new form EventsB
    * 
    * @throws IOException
    * @throws NumberFormatException
    */
   public List_Events() throws NumberFormatException, IOException
   {
      initComponents();
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    * 
    * @throws IOException
    * @throws NumberFormatException
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated
   // Code">//GEN-BEGIN:initComponents
   private void initComponents() throws NumberFormatException, IOException
   {

      jLabel1 = new javax.swing.JLabel();
      jButton1 = new javax.swing.JButton();
      jButton2 = new javax.swing.JButton();
      jButton3 = new javax.swing.JButton();
      jTextField1 = new javax.swing.JTextField();
      jButton4 = new javax.swing.JButton();
      jSeparator1 = new javax.swing.JSeparator();
      jComboBox1 = new javax.swing.JComboBox<>();
      jLabel3 = new javax.swing.JLabel();
      jScrollPane1 = new javax.swing.JScrollPane();
      jList1 = new javax.swing.JList<>();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      setTitle("Events");
      setMinimumSize(new java.awt.Dimension(300, 300));
      setModalExclusionType(
            java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
      setPreferredSize(new java.awt.Dimension(800, 900));
      setSize(new java.awt.Dimension(800, 900));

      jLabel1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
      jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
      jLabel1.setText("Event List");

      jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
      jButton1.setText("Add");
      jButton1.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButton1ActionPerformed(evt);
         }
      });

      jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
      jButton2.setText("Edit");
      jButton2.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            try
            {
               jButton2ActionPerformed(evt);
            }
            catch (FileNotFoundException e)
            {
               e.printStackTrace();
            }
         }
      });

      jButton3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
      jButton3.setText("Delete");
      jButton3.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButton3ActionPerformed(evt);
         }
      });
      jTextField1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
      jTextField1.setToolTipText("");
      jTextField1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
      jTextField1.setName(""); // NOI18N
      jTextField1.setPreferredSize(new java.awt.Dimension(6, 25));
      jTextField1.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jTextField1ActionPerformed(evt);
         }
      });

      jButton4.setText("Back To Main Menu");
      jButton4.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButton4ActionPerformed(evt);
         }
      });

      jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
      jComboBox1.setModel(
            new DefaultComboBoxModel(new String[] {"Event title", "Start date", "Lecturer name", "Subject", "Price", "Sponsor name", "Finalized"}));
      jComboBox1.setPreferredSize(new java.awt.Dimension(87, 25));

      jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
      jLabel3.setText("Search:");

      // getting events

      Event[] eventsArr = new Event[VIASystem.events.getAllEvents().size()];
      for (int i = 0; i < VIASystem.events.getAllEvents().size(); i++)
      {
         eventsArr[i] = VIASystem.events.getAllEvents().get(i);
      }

      jList1.setListData(eventsArr);
      jList1.setCellRenderer(new EventListCellRenderer());
      jList1.setFixedCellHeight(40);
      jList1.setPreferredSize(new java.awt.Dimension(0, 20));
      jList1.addMouseListener(new MouseAdapter() {
         public void mouseClicked(MouseEvent evt) {
             JList list = (JList)evt.getSource();
             if (evt.getClickCount() == 2) {
                
                String message = new String();
                message = jList1.getSelectedValue().userToString();

                JOptionPane.showMessageDialog(null, message);
                
                 // Double-click detected
                 int index = list.locationToIndex(evt.getPoint());
             } else if (evt.getClickCount() == 3) {

                 // Triple-click detected
                 int index = list.locationToIndex(evt.getPoint());
             }
         }
     });
      jScrollPane1.setViewportView(jList1);

      clearFilter = new JButton("");
      clearFilter.addActionListener(new ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            clearFilterActionPerformed(evt);
         }
      });
      clearFilter.setIcon(new ImageIcon(List_Events.class.getResource(
            "/com/sun/javafx/scene/control/skin/caspian/dialog-error.png")));
      clearFilter.setToolTipText("Clears the search filters");

      JLabel lblBy = new JLabel("by:");

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
            getContentPane());
      layout.setHorizontalGroup(
         layout.createParallelGroup(Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
               .addGap(50)
               .addGroup(layout.createParallelGroup(Alignment.LEADING)
                  .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
                  .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 320, GroupLayout.PREFERRED_SIZE)
                  .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                  .addGroup(layout.createSequentialGroup()
                     .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                           .addComponent(lblBy)
                           .addPreferredGap(ComponentPlacement.UNRELATED)
                           .addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, 178, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                           .addComponent(jButton1, GroupLayout.PREFERRED_SIZE, 99, GroupLayout.PREFERRED_SIZE)
                           .addGap(30)
                           .addComponent(jButton2, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                           .addGap(30)
                           .addComponent(jButton3, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                           .addGap(32)
                           .addComponent(jLabel3)
                           .addGap(18)
                           .addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, 178, GroupLayout.PREFERRED_SIZE)))
                     .addPreferredGap(ComponentPlacement.RELATED)
                     .addComponent(clearFilter, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)))
               .addGap(56))
            .addGroup(layout.createSequentialGroup()
               .addContainerGap(557, Short.MAX_VALUE)
               .addComponent(jButton4, GroupLayout.PREFERRED_SIZE, 143, GroupLayout.PREFERRED_SIZE)
               .addGap(82))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
               .addContainerGap(13, Short.MAX_VALUE)
               .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                  .addGroup(layout.createSequentialGroup()
                     .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE)
                     .addGap(20)
                     .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                     .addGap(30)
                     .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                        .addComponent(jButton1, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                     .addPreferredGap(ComponentPlacement.RELATED)
                     .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                        .addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblBy))
                     .addGap(20))
                  .addGroup(layout.createSequentialGroup()
                     .addComponent(clearFilter, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
                     .addGap(68)))
               .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 417, GroupLayout.PREFERRED_SIZE)
               .addGap(18)
               .addComponent(jButton4, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
               .addGap(199))
      );
      getContentPane().setLayout(layout);

      jTextField1.getAccessibleContext().setAccessibleName("PPPP");

      getAccessibleContext().setAccessibleName("");

      pack();
      setLocationRelativeTo(null);
   }// </editor-fold>//GEN-END:initComponents

   private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt)
   {// GEN-FIRST:event_jTextField1ActionPerformed
    // TODO add your handling code here:
      
      Event[] eventsArr = new Event[VIASystem.events.getAllEvents().size()];
      
      if(jComboBox1.getSelectedItem().equals("Event title"))
      {
         
          eventsArr = VIASystem.events.getEventByTitle(jTextField1.getText());
          
          jList1.setListData(eventsArr);
      }
      else if(jComboBox1.getSelectedItem() == "Start date")
      {
         try
         {
            String[] numbers = jTextField1.getText().split("\\.");
            int[] results = new int[numbers.length];   
         for (int i = 0; i < numbers.length; i++)
         {
            results[i] = Integer.parseInt(numbers[i]);
         }
               
           Date date = new Date(results[0], results[1], results[2]);
           eventsArr = VIASystem.events.getEvent(date);
           jList1.setListData(eventsArr);
         }
         catch(NumberFormatException e)
         {
            JOptionPane.showMessageDialog(null,
                  "Please enter a valid input (use only numbers and dots) \nE.g: 15.12.2017");
         }
      }
      else if(jComboBox1.getSelectedItem() == "Lecturer name")
      {
         Lecturer lecturer = VIASystem.lecturers.getLecturer(jTextField1.getText());
         eventsArr = VIASystem.events.getEvent(lecturer);
         jList1.setListData(eventsArr);
      }
      else if(jComboBox1.getSelectedItem() == "Subject")
      {
         eventsArr = VIASystem.events.getEvent(jTextField1.getText());
         jList1.setListData(eventsArr);
      }
      else if(jComboBox1.getSelectedItem() == "Price")
      {
         try
         {
         eventsArr = VIASystem.events.getEvent(Integer.parseInt(jTextField1.getText()));
         }
         catch(NumberFormatException e)
         {
            JOptionPane.showMessageDialog(null,
                  "Please enter a valid input (use only numbers) \nE.g: 100");
         }
         jList1.setListData(eventsArr);
      }
      else if(jComboBox1.getSelectedItem() == "Sponsor Name")
      {
         eventsArr = VIASystem.events.getEventBySponsor(jTextField1.getText());
         jList1.setListData(eventsArr);
      }
      else if(jComboBox1.getSelectedItem() == "Finalized")
      {
         eventsArr = VIASystem.events.getEvent(true);
         jList1.setListData(eventsArr);
      }
      
   }// GEN-LAST:event_jTextField1ActionPerformed

   private void jButton4ActionPerformed(java.awt.event.ActionEvent evt)
   {// GEN-FIRST:event_jButton4ActionPerformed
      this.setVisible(false);
      new NewJFrame().setVisible(true);

   }// GEN-LAST:event_jButton4ActionPerformed

   private void clearFilterActionPerformed(java.awt.event.ActionEvent evt)
   {
      jTextField1.setText("");

      Event[] eventsArr = new Event[VIASystem.events.getAllEvents().size()];
      for (int i = 0; i < VIASystem.events.getAllEvents().size(); i++)
      {
         eventsArr[i] = VIASystem.events.getAllEvents().get(i);
      }

      jList1.setListData(eventsArr);
   }

   private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)
   {// GEN-FIRST:event_jButton1ActionPerformed

      this.setVisible(false);
      new Event_add_Define().setVisible(true);

   }// GEN-LAST:event_jButton1ActionPerformed

   private void jButton3ActionPerformed(java.awt.event.ActionEvent evt)
   {
      VIASystem.events.removeEvent(jList1.getSelectedValue());

      // reseting jList1

      Event[] eventsArr = new Event[VIASystem.events.getAllEvents().size()];
      for (int i = 0; i < VIASystem.events.getAllEvents().size(); i++)
      {
         eventsArr[i] = VIASystem.events.getAllEvents().get(i);
      }

      jList1.setListData(eventsArr);
   }

   private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)
         throws FileNotFoundException
   {// GEN-FIRST:event_jButton2ActionPerformed

      if (jList1.getSelectedValue() instanceof Lecture)
      {
         Lecture lecture = new Lecture(1);
         lecture = (Lecture) jList1.getSelectedValue();
         String title = "";
         String startDate = "";
         String startTime = "";
         String tickets = "";
         String discount = "";
         String price = "";
         String finalized = "";
         String lecturer = "";
         String subject = "";
         String sponsor = "";
         String duration = "";

         title = JOptionPane.showInputDialog("Enter a new title: "
               + "\n(leave empty if you do not wish to modify it)");

         startDate = JOptionPane.showInputDialog("Enter a new start date: "
               + "\n(leave empty if you do not wish to modify it)");

         startTime = JOptionPane.showInputDialog("Enter a new start time: "
               + "\n(leave empty if you do not wish to modify it)");

         tickets = JOptionPane
               .showInputDialog("Enter a new total amount of tickets: "
                     + "\n(leave empty if you do not wish to modify it)");

         discount = JOptionPane.showInputDialog("Enter a new discount: "
               + "\n(leave empty if you do not wish to modify it)");

         price = JOptionPane.showInputDialog("Enter a new price: "
               + "\n(leave empty if you do not wish to modify it)");

         finalized = JOptionPane.showInputDialog(
               "Is the event finalized?(answer with yes or no) "
                     + "\n(leave empty if you do not wish to modify it)");

         lecturer = JOptionPane.showInputDialog("Enter a new lecturers name: "
               + "\n(leave empty if you do not wish to modify it)");

         subject = JOptionPane.showInputDialog("Enter a new subject: "
               + "\n(leave empty if you do not wish to modify it)");

         sponsor = JOptionPane.showInputDialog("Enter the new sponsors name: "
               + "\n(leave empty if you do not wish to modify it)");

         duration = JOptionPane.showInputDialog("Enter a new duration: "
               + "\n(leave empty if you do not wish to modify it)");

         if (title.length() != 0)
         {
            lecture.setTitle(title);
         }
         if (startDate.length() != 0)
         {
            // startDate conversion
            String[] numbers = startDate.split("\\.");

            int[] results = new int[numbers.length];
            try
            {
               for (int i = 0; i < numbers.length; i++)
               {
                  results[i] = Integer.parseInt(numbers[i]);
               }
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers and dots) \nE.g: 15.12.2017");
            }
            Date date = new Date(results[0], results[1], results[2]);
            lecture.setStartDate(date);
         }

         if (startTime.length() != 0)
         {
            // startTime conversion
            String[] timeSplit = startTime.split("\\ ");

            int[] timeInt = new int[timeSplit.length];
            try
            {
               timeInt[0] = Integer.parseInt(timeSplit[0]);
               timeInt[1] = Integer.parseInt(timeSplit[1]);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers and spaces) \nE.g: 2 30");
            }
            Time startTimeObj = new Time(timeInt[0], timeInt[1]);
            lecture.setStartTime(startTimeObj);
         }

         if (duration.length() != 0)
         {
            // durationHour and durationMinute conversion
            String[] durationSplit = duration.split("\\ ");

            int[] durationInt = new int[durationSplit.length];
            try
            {
               durationInt[0] = Integer.parseInt(durationSplit[0]);
               durationInt[1] = Integer.parseInt(durationSplit[1]);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers and spaces) \nE.g: 2 30");
            }
            Time durationTimeObj = new Time(durationInt[0], durationInt[1]);
            lecture.setDuration(durationTimeObj);
         }

         if (tickets.length() != 0)
         {
            // tickets conversion
            int ticketsInt = jList1.getSelectedValue().getTotalTickets();
            try
            {
               ticketsInt = Integer.parseInt(tickets);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers) \nE.g: 200");
            }
            lecture.setTotalTickets(ticketsInt);
         }

         if (discount.length() != 0)
         {
            // discount conversion
            int discountInt = 0;
            try
            {
               discountInt = Integer.parseInt(discount);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers) \nE.g: 30");
            }
            lecture.setDiscount(discountInt);
         }

         if (finalized.length() != 0)
         {
            // getting finalized
            boolean finalizedBool = false;
            if (finalized.equals("yes") || finalized.equals("Yes"))
            {
               finalizedBool = true;
            }
            else if (finalized.equals("no") || finalized.equals("No"))
            {
               finalizedBool = false;
            }
            lecture.setFinalized(finalizedBool);
         }

         if (lecturer.length() != 0)
         {
            // getting lecturer
            lecture.setLecturer(VIASystem.lecturers.getLecturer(lecturer));
         }

         if (price.length() != 0)
         {
            // price conversion
            int priceInt = 0;
            try
            {
               priceInt = Integer.parseInt(price);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers) \nE.g: 100");
            }
            lecture.setPrice(priceInt);
         }
         if (sponsor.length() != 0)
         {
            lecture.setSponsorName(sponsor);
         }
         if (subject.length() != 0)
         {
            lecture.setSubject(subject);
         }

         lecture.writeToFile();
      }
      else if (jList1.getSelectedValue() instanceof Seminar)
      {
         Seminar seminar = new Seminar(1);
         seminar = (Seminar) jList1.getSelectedValue();
         String title = "";
         String startDate = "";
         String startTime = "";
         String tickets = "";
         String discount = "";
         String price = "";
         String finalized = "";
         String lecturers = "";
         String subjects = "";
         String sponsor = "";
         String duration = "";

         title = JOptionPane.showInputDialog("Enter a new title: "
               + "\n(leave empty if you do not wish to modify it)");

         startDate = JOptionPane.showInputDialog("Enter a new start date: "
               + "\n(leave empty if you do not wish to modify it)");

         startTime = JOptionPane.showInputDialog("Enter a new start time: "
               + "\n(leave empty if you do not wish to modify it)");

         tickets = JOptionPane
               .showInputDialog("Enter a new total amount of tickets: "
                     + "\n(leave empty if you do not wish to modify it)");

         discount = JOptionPane.showInputDialog("Enter a new discount: "
               + "\n(leave empty if you do not wish to modify it)");

         price = JOptionPane.showInputDialog("Enter a new price: "
               + "\n(leave empty if you do not wish to modify it)");

         finalized = JOptionPane.showInputDialog(
               "Is the event finalized?(answer with yes or no) "
                     + "\n(leave empty if you do not wish to modify it)");

         lecturers = JOptionPane
               .showInputDialog("Enter the new lectures' names: "
                     + "\n(leave empty if you do not wish to modify it)");

         subjects = JOptionPane.showInputDialog("Enter a new subjects: "
               + "\n(leave empty if you do not wish to modify it)");

         sponsor = JOptionPane.showInputDialog("Enter the new sponsors name: "
               + "\n(leave empty if you do not wish to modify it)");

         duration = JOptionPane.showInputDialog("Enter a new duration: "
               + "\n(leave empty if you do not wish to modify it)");

         if (lecturers.length() != 0)
         {
            // lecturers conversion
            String[] names = lecturers.split("\\ ");

            LecturerList lecturerList = new LecturerList();

            for (int i = 0; i < names.length; i++)
            {
               lecturerList
                     .addLecturer(VIASystem.lecturers.getLecturer(names[i]));
            }

            seminar.setLecturers(lecturerList);
         }

         if (startDate.length() != 0)
         {
            // startDate conversion
            String[] numbers = startDate.split("\\.");

            int[] results = new int[numbers.length];
            try
            {
               for (int i = 0; i < numbers.length; i++)
               {
                  results[i] = Integer.parseInt(numbers[i]);
               }
               Date date = new Date(results[0], results[1], results[2]);
               seminar.setStartDate(date);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers and dots) \nE.g: 15.12.2017");
            }
            
         }

         if (startTime.length() != 0)
         {
            // startTime conversion
            String[] timeSplit = startTime.split("\\ ");

            int[] timeInt = new int[timeSplit.length];
            try
            {
               timeInt[0] = Integer.parseInt(timeSplit[0]);
               timeInt[1] = Integer.parseInt(timeSplit[1]);
               Time startTimeObj = new Time(timeInt[0], timeInt[1]);
               seminar.setStartTime(startTimeObj);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers and spaces) \nE.g: 2 30");
            }
            
         }

         if (duration.length() != 0)
         {
            // durationHour and durationMinute conversion
            String[] durationSplit = duration.split("\\ ");

            int[] durationInt = new int[durationSplit.length];
            try
            {
               durationInt[0] = Integer.parseInt(durationSplit[0]);
               durationInt[1] = Integer.parseInt(durationSplit[1]);
               Time durationTimeObj = new Time(durationInt[0], durationInt[1]);
               seminar.setDuration(durationTimeObj);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers and spaces) \nE.g: 2 30");
            }
            
         }

         if (tickets.length() != 0)
         {
            // tickets conversion
            int ticketsInt = 0;
            try
            {
               ticketsInt = Integer.parseInt(tickets);
               seminar.setTotalTickets(ticketsInt);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers) \nE.g: 200");
            }
            
         }

         if (discount.length() != 0)
         {
            // discount conversion
            int discountInt = 0;
            try
            {
               discountInt = Integer.parseInt(discount);
               seminar.setDiscount(discountInt);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers) \nE.g: 30");
            }
            
         }

         if (finalized.length() != 0)
         {
            // getting finalized
            boolean finalizedBool = false;
            if (finalized.equals("yes") || finalized.equals("Yes"))
            {
               finalizedBool = true;
            }
            else if (finalized.equals("no") || finalized.equals("No"))
            {
               finalizedBool = false;
            }
            
            seminar.setFinalized(finalizedBool);
         }

         if (subjects.length() != 0)
         {
            // getting subjects
            String[] subjectsArr = subjects.split("\\ ");
            seminar.setSubjects(subjectsArr);
         }

         if (price.length() != 0)
         {
            // price conversion
            int priceInt = 0;
            try
            {
               priceInt = Integer.parseInt(price);
               seminar.setPrice(priceInt);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers) \nE.g: 100");
            }
            
         }
         if (sponsor.length() != 0)
         {
            seminar.setSponsorName(sponsor);
         }
         if (title.length() != 0)
         {
            seminar.setTitle(title);
         }

         seminar.writeToFile();
      }
      else if (jList1.getSelectedValue() instanceof Workshop)
      {
         Workshop workshop = new Workshop(1);
         workshop = (Workshop) jList1.getSelectedValue();
         String title = "";
         String startDate = "";
         String startTime = "";
         String tickets = "";
         String discount = "";
         String price = "";
         String finalized = "";
         String lecturers = "";
         String subjects = "";
         String food = "";
         String vegan = "";
         String sponsor = "";
         String duration = "";

         title = JOptionPane.showInputDialog("Enter a new title: "
               + "\n(leave empty if you do not wish to modify it)");

         startDate = JOptionPane.showInputDialog("Enter a new start date: "
               + "\n(leave empty if you do not wish to modify it)");

         startTime = JOptionPane.showInputDialog("Enter a new start time: "
               + "\n(leave empty if you do not wish to modify it)");

         tickets = JOptionPane
               .showInputDialog("Enter a new total amount of tickets: "
                     + "\n(leave empty if you do not wish to modify it)");

         discount = JOptionPane.showInputDialog("Enter a new discount: "
               + "\n(leave empty if you do not wish to modify it)");

         price = JOptionPane.showInputDialog("Enter a new price: "
               + "\n(leave empty if you do not wish to modify it)");

         finalized = JOptionPane.showInputDialog(
               "Is the event finalized?(answer with yes or no) "
                     + "\n(leave empty if you do not wish to modify it)");

         lecturers = JOptionPane
               .showInputDialog("Enter the new lectures' names: "
                     + "\n(leave empty if you do not wish to modify it)");

         subjects = JOptionPane.showInputDialog("Enter a new subjects: "
               + "\n(leave empty if you do not wish to modify it)");

         sponsor = JOptionPane.showInputDialog("Enter the new sponsors name: "
               + "\n(leave empty if you do not wish to modify it)");

         duration = JOptionPane.showInputDialog("Enter a new duration: "
               + "\n(leave empty if you do not wish to modify it)");

         food = JOptionPane.showInputDialog(
               "Does the workshop include food?(answer with yes or no) "
                     + "\n(leave empty if you do not wish to modify it)");

         vegan = JOptionPane
               .showInputDialog("Is the food vegan?(answer with yes or no): "
                     + "\n(leave empty if you do not wish to modify it)");

         if (startDate.length() != 0)
         {
            // startDate conversion
            String[] numbers = startDate.split("\\.");

            int[] results = new int[numbers.length];
            try
            {
               for (int i = 0; i < numbers.length; i++)
               {
                  results[i] = Integer.parseInt(numbers[i]);
               }
               Date date = new Date(results[0], results[1], results[2]);
               workshop.setStartDate(date);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers and dots) \nE.g: 15.12.2017");
            }
            
         }

         if (startTime.length() != 0)
         {
            // startTime conversion
            String[] timeSplit = startTime.split("\\ ");

            int[] timeInt = new int[timeSplit.length];
            try
            {
               timeInt[0] = Integer.parseInt(timeSplit[0]);
               timeInt[1] = Integer.parseInt(timeSplit[1]);
               Time startTimeObj = new Time(timeInt[0], timeInt[1]);
               workshop.setStartTime(startTimeObj);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers and spaces) \nE.g: 2 30");
            }
            
         }

         if (duration.length() != 0)
         {
            // duration conversion
            int durationInt = 0;
            try
            {
               durationInt = Integer.parseInt(duration);
               workshop.setDuration(durationInt);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers) \nE.g: 3");
            }
            
         }

         if (tickets.length() != 0)
         {
            // tickets conversion
            int ticketsInt = 0;
            try
            {
               ticketsInt = Integer.parseInt(tickets);
               workshop.setTotalTickets(ticketsInt);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers) \nE.g: 200");
            }
            
         }

         if (discount.length() != 0)
         {
            // discount conversion
            int discountInt = 0;
            try
            {
               discountInt = Integer.parseInt(discount);
               workshop.setDiscount(discountInt);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers) \nE.g: 30");
            }
            
         }

         if (finalized.length() != 0)
         {
            // getting finalized
            boolean finalizedBool = false;
            if (finalized.equals("yes") || finalized.equals("Yes"))
            {
               finalizedBool = true;
            }
            else if (finalized.equals("no") || finalized.equals("No"))
            {
               finalizedBool = false;
            }
            workshop.setFinalized(finalizedBool);
         }

         if (lecturers.length() != 0)
         {
            // lecturers conversion
            String[] names = lecturers.split("\\ ");

            LecturerList lecturerList = new LecturerList();

            for (int i = 0; i < names.length; i++)
            {
               lecturerList
                     .addLecturer(VIASystem.lecturers.getLecturer(names[i]));
            }

            workshop.setLecturers(lecturerList);
         }

         if (subjects.length() != 0)
         {
            // getting subjects
            String[] subjectsArr = subjects.split("\\ ");
            workshop.setSubjects(subjectsArr);
         }

         if (price.length() != 0)
         {
            // price conversion
            int priceInt = 0;
            try
            {
               priceInt = Integer.parseInt(price);
               workshop.setPrice(priceInt);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers) \nE.g: 100");
            }
            
         }

         if (sponsor.length() != 0)
         {
            workshop.setSponsorName(sponsor);
         }

         if (title.length() != 0)
         {
            workshop.setTitle(title);
         }
         if (food.length() != 0)
         {
            // getting food
            boolean foodBool = false;
            if (food.equals("yes") || food.equals("Yes"))
            {
               foodBool = true;
            }
            else if (food.equals("no") || food.equals("No"))
            {
               foodBool = false;
            }
            workshop.setFood(foodBool);
         }
         if (vegan.length() != 0)
         {
            // getting vegan
            boolean veganBool = false;
            if (vegan.equals("yes") || vegan.equals("Yes"))
            {
               veganBool = true;
            }
            else if (vegan.equals("no") || vegan.equals("No"))
            {
               veganBool = false;
            }
            workshop.setFood(veganBool);
         }

         workshop.writeToFile();
      }
      else if (jList1.getSelectedValue() instanceof Trip)
      {
         Trip trip = new Trip(1);
         trip = (Trip) jList1.getSelectedValue();
         String title = "";
         String startDate = "";
         String startTime = "";
         String tickets = "";
         String discount = "";
         String price = "";
         String finalized = "";
         String duration = "";

         title = JOptionPane.showInputDialog("Enter a new title: "
               + "\n(leave empty if you do not wish to modify it)");

         startDate = JOptionPane.showInputDialog("Enter a new start date: "
               + "\n(leave empty if you do not wish to modify it)");

         startTime = JOptionPane.showInputDialog("Enter a new start time: "
               + "\n(leave empty if you do not wish to modify it)");

         tickets = JOptionPane
               .showInputDialog("Enter a new total amount of tickets: "
                     + "\n(leave empty if you do not wish to modify it)");

         discount = JOptionPane.showInputDialog("Enter a new discount: "
               + "\n(leave empty if you do not wish to modify it)");

         price = JOptionPane.showInputDialog("Enter a new price: "
               + "\n(leave empty if you do not wish to modify it)");

         finalized = JOptionPane.showInputDialog(
               "Is the event finalized?(answer with yes or no) "
                     + "\n(leave empty if you do not wish to modify it)");

         duration = JOptionPane.showInputDialog("Enter a new duration: "
               + "\n(leave empty if you do not wish to modify it)");

         if (startDate.length() != 0)
         {
            // startDate conversion
            String[] numbers = startDate.split("\\.");

            int[] results = new int[numbers.length];
            try
            {
               for (int i = 0; i < numbers.length; i++)
               {
                  results[i] = Integer.parseInt(numbers[i]);
               }
               Date date = new Date(results[0], results[1], results[2]);
               trip.setStartDate(date);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers and dots) \nE.g: 15.12.2017");
            }
            
         }

         if (startTime.length() != 0)
         {
            // startTime conversion
            String[] timeSplit = startTime.split("\\ ");

            int[] timeInt = new int[timeSplit.length];
            try
            {
               timeInt[0] = Integer.parseInt(timeSplit[0]);
               timeInt[1] = Integer.parseInt(timeSplit[1]);
               Time startTimeObj = new Time(timeInt[0], timeInt[1]);
               trip.setStartTime(startTimeObj);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers and spaces) \nE.g: 2 30");
            }
            
         }

         if (duration.length() != 0)
         {
            // duration conversion
            int durationInt = 0;
            try
            {
               durationInt = Integer.parseInt(duration);
               trip.setDuration(durationInt);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers) \nE.g: 3");
            }
            
         }

         if (tickets.length() != 0)
         {
            // tickets conversion
            int ticketsInt = 0;
            try
            {
               ticketsInt = Integer.parseInt(tickets);
               trip.setTotalTickets(ticketsInt);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers) \nE.g: 200");
            }
            
         }

         if (discount.length() != 0)
         {
            // discount conversion
            int discountInt = 0;
            try
            {
               discountInt = Integer.parseInt(discount);
               trip.setDiscount(discountInt);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers) \nE.g: 30");
            }
            
         }

         if (finalized.length() != 0)
         {
            // getting finalized
            boolean finalizedBool = false;
            if (finalized.equals("yes") || finalized.equals("Yes"))
            {
               finalizedBool = true;
            }
            else if (finalized.equals("no") || finalized.equals("No"))
            {
               finalizedBool = false;
            }
            trip.setFinalized(finalizedBool);
         }

         if (price.length() != 0)
         {
            // price conversion
            int priceInt = 0;
            try
            {
               priceInt = Integer.parseInt(price);
               trip.setPrice(priceInt);
            }
            catch (NumberFormatException e)
            {
               JOptionPane.showMessageDialog(null,
                     "Please enter a valid input (use only numbers) \nE.g: 100");
            }
            
         }

         if (title.length() != 0)
         {
            trip.setTitle(title);
         }

         trip.writeToFile();
      }

   }// GEN-LAST:event_jButton2ActionPerformed

   /**
    * @param args
    *           the command line arguments
    * @throws IOException
    * @throws NumberFormatException
    */
   public static void main(String args[])
         throws NumberFormatException, IOException
   {
      /* Set the Nimbus look and feel */
      // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
      // (optional) ">
      /*
       * If Nimbus (introduced in Java SE 6) is not available, stay with the
       * default look and feel. For details see
       * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.
       * html
       */

      try
      {
         FileController.readEvents();
      }
      catch (NullPointerException e)
      {
         e.printStackTrace();
      }

      try
      {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
               .getInstalledLookAndFeels())
         {
            if ("Nimbus".equals(info.getName()))
            {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      }
      catch (ClassNotFoundException ex)
      {
         java.util.logging.Logger.getLogger(List_Events.class.getName())
               .log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (InstantiationException ex)
      {
         java.util.logging.Logger.getLogger(List_Events.class.getName())
               .log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (IllegalAccessException ex)
      {
         java.util.logging.Logger.getLogger(List_Events.class.getName())
               .log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (javax.swing.UnsupportedLookAndFeelException ex)
      {
         java.util.logging.Logger.getLogger(List_Events.class.getName())
               .log(java.util.logging.Level.SEVERE, null, ex);
      }
      // </editor-fold>
      // </editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable()
      {
         public void run()
         {
            try
            {
               new List_Events().setVisible(true);
            }
            catch (NumberFormatException e)
            {
               e.printStackTrace();
            }
            catch (IOException e)
            {
               e.printStackTrace();
            }
         }
      });
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton jButton1;
   private javax.swing.JButton jButton2;
   private javax.swing.JButton jButton3;
   private javax.swing.JButton jButton4;
   private javax.swing.JComboBox<String> jComboBox1;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JList<Event> jList1;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JTextField jTextField1;
   private JButton clearFilter;
}
